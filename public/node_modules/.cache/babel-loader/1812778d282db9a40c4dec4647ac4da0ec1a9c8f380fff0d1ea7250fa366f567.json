{"ast":null,"code":"var _jsxFileName = \"C:\\\\game\\\\memory-card-game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\n// Define card colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseCardColors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\"];\n\n// Generate cards with random colors\nconst generateCards = () => {\n  const cardColors = [...baseCardColors, ...baseCardColors].sort(() => Math.random() - 0.5);\n  return cardColors.map((color, index) => ({\n    id: index,\n    color,\n    matched: false\n  }));\n};\n\n// Get a random color different from the current color\nconst getRandomColor = currentColor => {\n  let newColor;\n  do {\n    newColor = baseCardColors[Math.floor(Math.random() * baseCardColors.length)];\n  } while (newColor === currentColor);\n  return newColor;\n};\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [score, setScore] = useState(0);\n  const [chances, setChances] = useState(5);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  // Shuffle cards on component mount and reset\n  useEffect(() => {\n    setCards(generateCards());\n  }, []);\n\n  // Handle card choice\n  const handleChoice = card => {\n    if (choiceOne && choiceOne.id === card.id) return; // Prevent selecting the same card\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  // Compare two selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.color === choiceTwo.color) {\n        setCards(prevCards => prevCards.map(card => {\n          if (card.color === choiceOne.color) {\n            return {\n              ...card,\n              matched: true,\n              color: getRandomColor(card.color)\n            }; // Change color after match\n          } else {\n            return card;\n          }\n        }));\n        setScore(prevScore => prevScore + 1); // Increase score by 1\n        resetTurn();\n      } else {\n        setChances(prevChances => prevChances - 1); // Decrease chances by 1\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  // Automatically start a new game when the score reaches 6\n  useEffect(() => {\n    if (score === 6) {\n      alert(\"Congratulations! You've reached a score of 6. Starting a new game.\");\n      setCards(generateCards());\n      setTurns(0);\n      setScore(0);\n      setChances(5); // Reset chances to 5\n    }\n  }, [score]);\n\n  // Reset choices and increase turn count\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  // End the game if chances reach 0\n  useEffect(() => {\n    if (chances === 0) {\n      alert(`Game Over! Your score is ${score}. Try again.`);\n      setCards(generateCards()); // Reset the game\n      setTurns(0);\n      setScore(0);\n      setChances(5); // Reset chances to 5\n    }\n  }, [chances, score]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Card Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCards(generateCards()),\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turns: \", turns]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Chances Left: \", chances]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === choiceOne || card === choiceTwo || card.matched,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0wcP+pO7jAmIAGWLStsds1d8U4I=\");\n_c = App;\nfunction SingleCard({\n  card,\n  handleChoice,\n  flipped,\n  disabled\n}) {\n  const handleClick = () => {\n    if (!disabled && !flipped) {\n      handleChoice(card);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    onClick: handleClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `card-inner ${flipped ? \"flipped\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-front\",\n        style: {\n          backgroundColor: flipped ? card.color : \"black\"\n        } // Show color only if flipped\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_c2 = SingleCard;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"SingleCard\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","baseCardColors","generateCards","cardColors","sort","Math","random","map","color","index","id","matched","getRandomColor","currentColor","newColor","floor","length","App","_s","cards","setCards","turns","setTurns","score","setScore","chances","setChances","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","handleChoice","card","prevCards","prevScore","resetTurn","prevChances","setTimeout","alert","prevTurns","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","SingleCard","flipped","_c","handleClick","style","backgroundColor","_c2","$RefreshReg$"],"sources":["C:/game/memory-card-game/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\n// Define card colors\r\nconst baseCardColors = [\r\n  \"red\",\r\n  \"blue\",\r\n  \"green\",\r\n  \"yellow\",\r\n  \"purple\",\r\n  \"orange\",\r\n];\r\n\r\n// Generate cards with random colors\r\nconst generateCards = () => {\r\n  const cardColors = [...baseCardColors, ...baseCardColors]\r\n    .sort(() => Math.random() - 0.5);\r\n  return cardColors.map((color, index) => ({\r\n    id: index,\r\n    color,\r\n    matched: false\r\n  }));\r\n};\r\n\r\n// Get a random color different from the current color\r\nconst getRandomColor = (currentColor) => {\r\n  let newColor;\r\n  do {\r\n    newColor = baseCardColors[Math.floor(Math.random() * baseCardColors.length)];\r\n  } while (newColor === currentColor);\r\n  return newColor;\r\n};\r\n\r\nfunction App() {\r\n  const [cards, setCards] = useState([]);\r\n  const [turns, setTurns] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [chances, setChances] = useState(5);\r\n  const [choiceOne, setChoiceOne] = useState(null);\r\n  const [choiceTwo, setChoiceTwo] = useState(null);\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  // Shuffle cards on component mount and reset\r\n  useEffect(() => {\r\n    setCards(generateCards());\r\n  }, []);\r\n\r\n  // Handle card choice\r\n  const handleChoice = (card) => {\r\n    if (choiceOne && choiceOne.id === card.id) return; // Prevent selecting the same card\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\r\n  };\r\n\r\n  // Compare two selected cards\r\n  useEffect(() => {\r\n    if (choiceOne && choiceTwo) {\r\n      setDisabled(true);\r\n      if (choiceOne.color === choiceTwo.color) {\r\n        setCards((prevCards) =>\r\n          prevCards.map((card) => {\r\n            if (card.color === choiceOne.color) {\r\n              return { ...card, matched: true, color: getRandomColor(card.color) }; // Change color after match\r\n            } else {\r\n              return card;\r\n            }\r\n          })\r\n        );\r\n        setScore((prevScore) => prevScore + 1); // Increase score by 1\r\n        resetTurn();\r\n      } else {\r\n        setChances((prevChances) => prevChances - 1); // Decrease chances by 1\r\n        setTimeout(() => resetTurn(), 1000);\r\n      }\r\n    }\r\n  }, [choiceOne, choiceTwo]);\r\n\r\n  // Automatically start a new game when the score reaches 6\r\n  useEffect(() => {\r\n    if (score === 6) {\r\n      alert(\"Congratulations! You've reached a score of 6. Starting a new game.\");\r\n      setCards(generateCards());\r\n      setTurns(0);\r\n      setScore(0);\r\n      setChances(5); // Reset chances to 5\r\n    }\r\n  }, [score]);\r\n\r\n  // Reset choices and increase turn count\r\n  const resetTurn = () => {\r\n    setChoiceOne(null);\r\n    setChoiceTwo(null);\r\n    setTurns((prevTurns) => prevTurns + 1);\r\n    setDisabled(false);\r\n  };\r\n\r\n  // End the game if chances reach 0\r\n  useEffect(() => {\r\n    if (chances === 0) {\r\n      alert(`Game Over! Your score is ${score}. Try again.`);\r\n      setCards(generateCards()); // Reset the game\r\n      setTurns(0);\r\n      setScore(0);\r\n      setChances(5); // Reset chances to 5\r\n    }\r\n  }, [chances, score]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Memory Card Game</h1>\r\n      <button onClick={() => setCards(generateCards())}>New Game</button>\r\n      <div className=\"stats\">\r\n        <p>Turns: {turns}</p>\r\n        <p>Score: {score}</p>\r\n        <p>Chances Left: {chances}</p>\r\n      </div>\r\n      <div className=\"card-grid\">\r\n        {cards.map((card) => (\r\n          <SingleCard\r\n            key={card.id}\r\n            card={card}\r\n            handleChoice={handleChoice}\r\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\r\n            disabled={disabled}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SingleCard({ card, handleChoice, flipped, disabled }) {\r\n  const handleClick = () => {\r\n    if (!disabled && !flipped) {\r\n      handleChoice(card);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\" onClick={handleClick}>\r\n      <div className={`card-inner ${flipped ? \"flipped\" : \"\"}`}>\r\n        {/* Card front */}\r\n        <div\r\n          className=\"card-front\"\r\n          style={{ backgroundColor: flipped ? card.color : \"black\" }} // Show color only if flipped\r\n        />\r\n        {/* Card back */}\r\n        <div className=\"card-back\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}